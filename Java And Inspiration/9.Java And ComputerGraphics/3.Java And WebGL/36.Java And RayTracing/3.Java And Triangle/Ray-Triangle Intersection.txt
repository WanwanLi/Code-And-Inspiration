//http://www.lighthouse3d.com/tutorials/maths/ray-triangle-intersection/
/*
	The solution presented in here is the one from Moller and Trumbore. A point in a triangle can be defined as:

    	point(u,v) = (1-u-v)*p0 + u*p1 + v*p2

	where

	p0,p1,p2 are the vertices of the triangle 

	u >= 0
	v >= 0
	u + v <= 1.0


	so if the ray intersects with the triangle:
	
			O + t*D = (1 - u - v)*V0 + u*V1 + v*V2

	so re-write it:

					|  t   |
		                [ -D , V1-V0 , V2-V0 ]	|  u  |  =  O - V0
					|  v  |

	if:

			E1 = V1 - V0 , E2 = V2 - V0 , T = O - V0 : 

	so there is:
		
			|  t   |                        1                   |  { T, E1, E2  }  |
			|  u  |  =  ！！！！！！！！！！  |  { -D, T, E2  }  |
			|  v  |	      {-D, E1, E2 }           |  { -D, E1, T  }  |

	and we know that :

			{  A, B, C } = A . ( B x C ) = - ( A x C ) . B =  - ( C x B ) . A 

	so there is:
		
			|  t   |                        1                   |   ( T x E1 ) . E2   |
			|  u  |  =  ！！！！！！！！！！  |   ( D x E2 ) . T    |
			|  v  |	    ( D x E2 ) . E1          |    ( T x E1 ) . D   |


*/

/* a = b - c */
#define vector(a,b,c) \
	(a)[0] = (b)[0] - (c)[0];	\
	(a)[1] = (b)[1] - (c)[1];	\
	(a)[2] = (b)[2] - (c)[2];

int rayIntersectsTriangle(float *p, float *d, float *v0, float *v1, float *v2) 
{

	float e1[3],e2[3],h[3],s[3],q[3];
	float a,f,u,v;
	vector(e1,v1,v0);
	vector(e2,v2,v0);

	crossProduct(h,d,e2);
	a = innerProduct(e1,h);

	if (a > -0.00001 && a < 0.00001)
		return(false);

	f = 1/a;
	vector(s,p,v0);
	u = f * (innerProduct(s,h));

	if (u < 0.0 || u > 1.0)
		return(false);

	crossProduct(q,s,e1);
	v = f * innerProduct(d,q);

	if (v < 0.0 || u + v > 1.0)
		return(false);

	// at this stage we can compute t to find out where
	// the intersection point is on the line
	t = f * innerProduct(e2,q);

	if (t > 0.00001) // ray intersection
		return(true);

	else // this means that there is a line intersection
		 // but not a ray intersection
		 return (false);

}
